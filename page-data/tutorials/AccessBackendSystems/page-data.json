{"componentChunkName":"component---src-pages-tutorials-access-backend-systems-index-mdx","path":"/tutorials/AccessBackendSystems/","result":{"pageContext":{"frontmatter":{"title":"Access backend systems using APIs and Messaging"},"relativePagePath":"/tutorials/AccessBackendSystems/index.mdx","titleType":"page","MdxNode":{"id":"ec91f336-6c29-527c-ad8c-2edec6ab3761","children":[],"parent":"25048a9c-4bd3-57f7-9adc-a84bf592330b","internal":{"content":"---\ntitle: Access backend systems using APIs and Messaging\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n<ArticleDetails name=\"Carlos Hirata, Ravi Katikala\" lastUpdated=\"September 2020\" readTimeMinutes=\"45\" />\n\nIn this tutorial, you use the Cloud Pak for Integration 2020.2.1 to create an App Integration flow (IBM App Connect Enterprise) that sends messages to a queue (IBM MQ) on OpenShift 4.4 .\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Prepare the environment</AnchorLink>\n  <AnchorLink>Configuring IBM MQ</AnchorLink>\n  <AnchorLink>Working with App Connect Enterprise toolkit</AnchorLink>\n  <AnchorLink>Deploying a BAR file</AnchorLink>\n  <AnchorLink>Using Operational Dashboard</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n## Introduction\n\nImplement enterprise grade messaging that is secure and reliable for any application across your backend integration architecture. Modern applications and APIs all need the ability to communicate data reliably between mission critical systems across internal/external data sources, networks, and regions. In mission critical environments your messaging infrastructure must be robust, reliable, and secure with the ability to integrate into your applications and APIs at pace and scale. In this tutorial, you create a message queue that receives order data from an API call to a retail ordering system. The red box in the diagram shows what you are creating and where it fits in the overall architecture of a mobile retail buying application.\n\n## Takeaways\n\n- Exploring multiple integration capabilities within a single platform\n- Configuring IBM MQ\n- Creating an integration flow that connects to a message queue\n- Deploy the integration flow as a container in Kubernetes\n- Checking the message using MQ Web Console\n- Checking this message using Operational Dashboard (tracing)\n\n\n## Preparing the environment\n\n**Note: If your using this in a multi-user ROKS setup, the environment is already prepared for you. Please login to the cluster using the credentials provided by your instrcutor and jump to [Configuring IBM MQ](#configuring-ibm-mq). Also, maske sure that you use a prefix provided by the instructor for queue, topic and server names.**\n\nAs this is a new deployment of the Cloud Pak for Integration, you must execute some steps to prepare the environment. Initial setup steps are only needed for a fresh installation of the platform. They do not need to be repeated.\nYou can use your workstation (MAC OSX) for working in this lab.\n\nIn your workstation open a browser and enter http://cloud.ibm.com and enter your ibmid  and click continue and password to login IBM Cloud.\n\n![](images/tutorial_html_4684368ee9aef605.png)\n\nUse the password specified in parenthesis to login to VNC\n\n![](images/tutorial_html_dcc3a9fa250b6267.png)\n\n1.In your workstation open a browser and enter http://cloud.ibm.com and enter your **ibmid** and click continue and password to login IBM Cloud.\n\n![](images/tutorial_html_40856922adb9fae5.png)\n\n2.Enter your IBM userid  and the password and then enter the verify code.\n\n![](images/tutorial_html_e00b9a6736f7e923.png)\n\n3.In the IBM Cloud Dashboard. You see all information about the infrastructure. On the Resource summary. Observe if you have one cluster and click **Cluster** link.\n\n![](images/tutorial_html_43ece9238189e0a4.png)\n\n4.You see the  available resources for your cluster. Select Clusters arrow and click your cluster line.\n\n![](images/tutorial_html_dd756ffd9ce473bb.png)\n\n5.In the cluster page, you see the status of your cluster infrastructure,. such as worker node, CPU and Memory usage. Click **OpenShift Web Console**.\n\n![](images/tutorial_html_d22a349be88c0a4f.png)\n\n6.In the OpenShift console. Select the following:\n\n```\n    1. **Networking**\n\n    2. **Routes**\n\n    3. Drill down the Project to **Integration**\n\n    5. Click the **Navigator** link.\n\n```\n![](images/tutorial_html_ff17543331daf722.png)\n\n7.Select **Default authentication** as authentication type.\n\n![](images/login_cloud_pak_admin_default.png)\n\n8.You might need to login screen for IBM Cloud Pak might be displayed, enter the username: admin and Password (Enter the 32 characters password that you created when you made the Cloud Pak provisioning) and Click Log in.\nTip: You might need to use the password. You can use the Clipboard to save the password.\n\n![](images/login_cloud_pak_userid_password.png)\n\n9.In the Cloud Pak Welcome page, you see Capabilities and Runtimes instances.\n\n![](images/Welcome_IBM_Cloud_Pak.png)\n\n10.You need to have access to Openshift cluster. In a browser go to **Openshift Console** and right top click **IAM#(your userid)** and click **Copy Login Command**.\n\n![](images/ocp-console-login.png)\n\n11.Click Display Token link and then copy the log in command:\n\n![](images/ocp-display-token.png)\n\n12.Open a terminal window and Paste the oc command.\n\n![](images/ocp-paste-ocp-terminal.png)\n\n\n## Configuring IBM MQ\n\nIBM Cloud Pak for Integration provides a single solution for all of your enterprise integration needs. The platform provides a comprehensive set of industry-leading capabilities. Combine powerful integration capabilities to create, manage, and monitor all of your integrations across applications, messaging, events, APIs, and more.\n\nIn this task, you create a local queue using MQ Console and check the MQ configuration. You create the queue, which accepts the resulting data from the call to the \"NEWORDER\" API.\n\n1.Open a browser and enter https://github.com/ibm-cloudintegration/dte-labs .You need to configure the MQ security.\n\n![](images/ace-mq-github.png)\n\n2.Select and click **Lab2-AccessBackendSystem** folder.\n\n![](images/ace-mq-download-git.png)\n\n3.Download two zip files (**ace-mq.zip and mqconf.zip**). Click over the **ace-mq.zip** file.\n\n![](images/ace-mq-ace-mqfile.png)\n\n4.Click **Download** and save to your download directory (**/home/student/Downloads** ).\n\n![](images/ace-mq-download-ace-mq.png)\n\n5.Download **mqconf.zip** and save in **/home/student/Downloads**.\n\n6.You need to configure IBM MQ permissions in MQ Runtime, before creating a local queue. Open a terminal window.\n\n![](images/es-command_line.png)\n\n7.In **/home/student** directory, create a work directory **mq-lab**. Use **mkdir -p mq-lab** .\n\n![](images/ace-mq-mkdir.png)\n\n8.Move the two files(**ace-mq.zip** and **mqconf.zip**) from **/home/student/Downloads** to **/home/student/mq-lab**. Use mv **/home/student/Downloads/ace-mq.zip /home/student/mq-lab** and **mv /home/student/Downloads/ace-mqconfig.zip /home/student/mq-lab**.\n\n![](images/ace-mq-move-two-file.png)\n\n9.Go to **/home/student/mq-lab** directory and uncompressing the **mqconfig.zip** . (**Do not uncompress ace-mq.zip**)\n\n10.The uncompressing process creates a directory **mqconf**. This directory contains IBM MQ Queue Manager security configuration. Go to **/home/student/mq-lab/mqconfig** and enter **./loadmq.sh** shell script.\n\n![](images/ace-mq-unzip-mqconfig.png)\n\n11.You have the MQ server configured to be accessed by App Connect Enterprise.\n\n![](images/ace-mq-after-loadmq.png)\n\n12.Open browser and go to **Welcome IBM Cloud Pak for Integration**. Select **Runtimes** and click **mq-demo** to work with IBM MQ.\n\n![](images/ace-mq-start-mq.png)\n\n13.You might see this warning (Potential Security Risk Ahead). Click Advance.  And then click the link, Accept the Risk and Continue). Don’t worry there is no Risk for your workstation.\n\n14.In the **Welcome IBM MQ page** (**QUICKSTART** is the name of queue manager). This page, you can manage queue manager, create queues, learn MQ basics, and get more information about IBM MQ. Click **Create a queue**.\n\n![](images/ace-mq-createaqueue.png)\n\n15.In Create a queue page. You can choose queue type: Local, Alias, Remote, and Model. Click **Local** to create a queue.\n\n![](images/ace-mq-localqueue.png)\n\n16.Enter the queue name: **NEWORDER** and keep the default values and the click **Create**.\n\n![](images/ace-mq-neworder.png)\n\n17.In the **Manage** page, locate the queues and click **NEWORDER** queue link.\n\n![](images/ace-mq-check-neworder.png)\n\n18.You see that the **NEWORDER** queue is empty. Click **QUICKSTART** link (the queue manager).\n\n![](images/ace-mq-neworder-empty.png)\n\n19.Verify MQ Server hostname. Open a terminal window and enter **oc get svc** . Locate the **mq-demo-ibm-mq**  **ClusterIP address**. In this case is: 172.21.26.194.\n\n![](images/ace-mq-get-mq-address.png)\n\n## Working with App Connect Enterprisa Toolkit (integration)\n\nIn this task, take an existing integration flow in ACE and modify it to send only the payload data to the NEWORDER queue.\n\n1.Open a terminal window by right-clicking on the desktop and selecting Open Terminal.\n\n2.Enter **ace toolkit** to open the App Connect Enterprise Toolkit.\n\n![](images/ace-mq-acetoolkit.png)\n\n3.In the Workspace Launcher window, create the workspace **/home/student/IBM/ACET11/workspace/ace-mq**. Click **OK**.\n\n![](images/ace-mq-create-ace-mq-workspace.png)\n\n4.Import App Connect Enterprise project. Click **File -> Import**.\n\n![](images/ace-mq-import-zipfile.png)\n\n5.Select Project Interchange and click **Next** .\n\n![](images/ace-mq-projectinterchange.png)\n\n6.Go to **/home/student/mq-lab** and select **ace-mq.zip**.\n\n![](images/ace-mq-ace-mq-file.png)\n\n7.Check the project name **neworder** and click **Finish**.\n\n![](images/ace-mq-confirm-neworder.png)\n\n8.Click **neworder > Resources > Subflows > getId.subflow** on the left pane.\n\n![](images/ace-mq-opengetid.png)\n\n9.Click the **MQ Output** tile. In the lower-right of the Properties pane, open the Properties tab and click **Basic**. Enter the queue name: **NEWORDER**.\n\n![](images/ace-mq-basci-neworder.png)\n\n10.\tClick the MQ Connection parameter and enter the following settings:\n\n```\n  1.\tConnection*: Select **MQ client connection properties** from the drop-down.\n  2.\tDestination queue manager name: **QUICKSTART** (case-sensitive).\n  3.\tQueue manager hostname: **172.21.26.194**. (When you entered **oc get svc**)\n  4.\tListener: **1414**.\n  5.\tChannel name: **SYSTEM.DEF.SRVCONN** (Server Connection).\n\n```\n![](images/ace-mq-mqconnection.png)\n\n11.Save your flow. Click the **save button** .\n\n12.Now, you need to generate a bar (broker archive) file. The App Connect Enterprise server uses BAR (Broker Archive) files to save compiled message flows, libraries, etc. We have created a file **neworder.bar** for this lab. In the Application Development window in the upper-left, on **neworder application**, right-click and select New then **BAR** file.\n\n![](images/ace-mq-create-bar-file.png)\n\n13.On the Window New Bar file, type the name of bar file: **neworder**.\n\n![](images/ace-mq-neworder-bar-file.png)\n\n14.\tApp Connect Enterprise opens a window: **Prepare window** .\n\n```\n\n  1.\tCheck REST APIs\n  2.\tCheck Compile and inline resources\n  3.\tClick Build and Save\n  4.\tA popup window displays “Operation completed successfully.”\n  5.\tClick Ok and exit out of the toolkit.\n\nApp Connect Enterprise Toolkit saves and compile message flows, sub flows into a BAR file.\n\n```\n![](images/ace-mq-save-bar-file.png)\n\n## Deploying a BAR file\n\nIn this task, deploy the integration flow as App Connect Enterprise containers running in Kubernetes on the Cloud Pak for Integration. You then test the integration API by calling the API to create a new order and confirm the response payload and data in the queue.\n\n1.In your browser, return to the IBM Cloud Pak for Integration.Under **Capabilities**, select the **App Connect Dashboard** line and click **db-demo** instance.\n\n![](images/ace-mq-open-db-demo.png)\n\n2.When you deploy a BAR file, you create a new instance of App Connect Enterprise. Click **Create Server**.\n\n![](images/ace-mq-create-server.png)\n\n3.Now, in the Create an **App Connect Integration Server** page, define which integration tool generated the **BAR File**. Select **Toolkit Integration** and then click **Next**.\n\n![](images/ace-mq-select-toolkit.png)\n\n4.In this step, drag a BAR file or click to upload\n\n![](images/ace-mq-drag-bar-file.png)\n\n5.In the File Upload window. Open **/home/student/IBM/ACET11/workspace/ace-mq/BARfiles** and select the file new **neworders.bar** and click **Open**. Verify the path routes to the **ace-mq** folder.\n\n![](images/ace-mq-new-file-neworder.png)\n\n6.You see that **neworder.bar** has uploaded to be deployed. Click **Next**.\n\n![](images/ace-mq-confirm-neworder-bar.png)\n\n7.You do not need to use the configuration package (**Configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc**) click **Next**.\n\n![](images/ace-mq-configuration.png)\n\n8.Now you configure App Connect, enter the parameters:\n\n```\n\n  1.\tEnter Integration Server name: **neworder**.\n  2.\tChange the replicas to: **1** . (This is a lab and do not need more replicas)\n  3.\tSwitch to **ON** to use **Operational Dashboard (tracing)**.\n  4.\tEnter Operational Dashboard instance namespace: **cp4i**.\n  5.\tUpdate the App Connect Enterprise version to the latest: **11.0.0.9 r3** .\n  6.\tClick **Create** .\n\n```\n![](images/ace-mq-configure-integration-server.png)\n\n9.You see the **App Connect Enterprise Dashboard** with the Integration Server **neworder** deployed and started. Click the **neworder** server icon.\n\n**Note:** The deployment process takes up to 5 minutes, refresh the browser to see the BAR file deployed and started.\n\n![](images/ace-mq-neworder-server.png)\n\n10.Click the **neworder API** icon.\n\n![](images/ace-mq-neworder-api.png)\n\n11.This page displays and copy the REST API Base URL (**Endpoint**), use the base URL (in the example :  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/). It might be different.\nIn this page, you can download a swagger file (you can import this file in API Connect and access by way of API Connect).\n\n![](images/ace-mq-neworder-endpoint.png)\n\n12.Open a terminal window and enter the curl command: curl -k  --request GET http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/00000. And see the results\n\n![](images/ace-mq-curl-result.png)\n\n13.You check the message arrived in queue **NEWORDER** in IBM MQ (**QUICKSTART**). You can check using IBM MQ Console. Open a browser and click **Cloud Pak Platform Navigator** and go to **Runtimes** and click **mq-demo** in the instance **Queue Manager**.\n\n![](images/ace-mq-ckeck-message-neworder.png)\n\n14.You see a new message has arrived in **NEWORDER** queue.\n\n![](images/ace-mq-message-arrived.png)\n\n## Using Operations Dashboard (tracing)\n\n\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance specialists now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n1.Back to the browser with Operations Dashboard opened. Click the Overview option and you see all the tracing of **MQ, App Connect and APIC** (You see how to configure tracing in APIC lab). Operations Dashboard Add-on is based on Jaeger open source project and the **OpenTracing** standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n![](images/ace-mq-tracing-overview.png)\n\n2.You can see also MQ tracing, click **MQ Overview** in Dashboard.\n\n![](images/ace-mq-tracing-mq-overview.png)\n\n3.You can see **App C tracing**, click **App C Overview** in Dashboard.\n\n![](images/ace-mq-tracing-appc-overview.png)\n\n4.In the tracing page in **Dashboards**, select **Traces** the menu on the left.\n\n![](images/ace-mq-tracing-traces.png)\n\n5.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ and App Connect Enterprise.\n\n![](images/ace-mq-tracing-trace-chart.png)\n\n## Summary\n\n\nYou've completed this tutorial. In this lab you learned how to:\n1.\tIncrease efficiency by creating, testing, and debugging an integration flow with a message queue within a single, unified experience\n2.\tIncrease scale by deploying integration flows and message queues as containers on Kubernetes.\n","type":"Mdx","contentDigest":"d4e45ac4c7c6b2ca09f1ed36da0e2b90","counter":866,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Access backend systems using APIs and Messaging"},"exports":{},"rawBody":"---\ntitle: Access backend systems using APIs and Messaging\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n<ArticleDetails name=\"Carlos Hirata, Ravi Katikala\" lastUpdated=\"September 2020\" readTimeMinutes=\"45\" />\n\nIn this tutorial, you use the Cloud Pak for Integration 2020.2.1 to create an App Integration flow (IBM App Connect Enterprise) that sends messages to a queue (IBM MQ) on OpenShift 4.4 .\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Prepare the environment</AnchorLink>\n  <AnchorLink>Configuring IBM MQ</AnchorLink>\n  <AnchorLink>Working with App Connect Enterprise toolkit</AnchorLink>\n  <AnchorLink>Deploying a BAR file</AnchorLink>\n  <AnchorLink>Using Operational Dashboard</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n## Introduction\n\nImplement enterprise grade messaging that is secure and reliable for any application across your backend integration architecture. Modern applications and APIs all need the ability to communicate data reliably between mission critical systems across internal/external data sources, networks, and regions. In mission critical environments your messaging infrastructure must be robust, reliable, and secure with the ability to integrate into your applications and APIs at pace and scale. In this tutorial, you create a message queue that receives order data from an API call to a retail ordering system. The red box in the diagram shows what you are creating and where it fits in the overall architecture of a mobile retail buying application.\n\n## Takeaways\n\n- Exploring multiple integration capabilities within a single platform\n- Configuring IBM MQ\n- Creating an integration flow that connects to a message queue\n- Deploy the integration flow as a container in Kubernetes\n- Checking the message using MQ Web Console\n- Checking this message using Operational Dashboard (tracing)\n\n\n## Preparing the environment\n\n**Note: If your using this in a multi-user ROKS setup, the environment is already prepared for you. Please login to the cluster using the credentials provided by your instrcutor and jump to [Configuring IBM MQ](#configuring-ibm-mq). Also, maske sure that you use a prefix provided by the instructor for queue, topic and server names.**\n\nAs this is a new deployment of the Cloud Pak for Integration, you must execute some steps to prepare the environment. Initial setup steps are only needed for a fresh installation of the platform. They do not need to be repeated.\nYou can use your workstation (MAC OSX) for working in this lab.\n\nIn your workstation open a browser and enter http://cloud.ibm.com and enter your ibmid  and click continue and password to login IBM Cloud.\n\n![](images/tutorial_html_4684368ee9aef605.png)\n\nUse the password specified in parenthesis to login to VNC\n\n![](images/tutorial_html_dcc3a9fa250b6267.png)\n\n1.In your workstation open a browser and enter http://cloud.ibm.com and enter your **ibmid** and click continue and password to login IBM Cloud.\n\n![](images/tutorial_html_40856922adb9fae5.png)\n\n2.Enter your IBM userid  and the password and then enter the verify code.\n\n![](images/tutorial_html_e00b9a6736f7e923.png)\n\n3.In the IBM Cloud Dashboard. You see all information about the infrastructure. On the Resource summary. Observe if you have one cluster and click **Cluster** link.\n\n![](images/tutorial_html_43ece9238189e0a4.png)\n\n4.You see the  available resources for your cluster. Select Clusters arrow and click your cluster line.\n\n![](images/tutorial_html_dd756ffd9ce473bb.png)\n\n5.In the cluster page, you see the status of your cluster infrastructure,. such as worker node, CPU and Memory usage. Click **OpenShift Web Console**.\n\n![](images/tutorial_html_d22a349be88c0a4f.png)\n\n6.In the OpenShift console. Select the following:\n\n```\n    1. **Networking**\n\n    2. **Routes**\n\n    3. Drill down the Project to **Integration**\n\n    5. Click the **Navigator** link.\n\n```\n![](images/tutorial_html_ff17543331daf722.png)\n\n7.Select **Default authentication** as authentication type.\n\n![](images/login_cloud_pak_admin_default.png)\n\n8.You might need to login screen for IBM Cloud Pak might be displayed, enter the username: admin and Password (Enter the 32 characters password that you created when you made the Cloud Pak provisioning) and Click Log in.\nTip: You might need to use the password. You can use the Clipboard to save the password.\n\n![](images/login_cloud_pak_userid_password.png)\n\n9.In the Cloud Pak Welcome page, you see Capabilities and Runtimes instances.\n\n![](images/Welcome_IBM_Cloud_Pak.png)\n\n10.You need to have access to Openshift cluster. In a browser go to **Openshift Console** and right top click **IAM#(your userid)** and click **Copy Login Command**.\n\n![](images/ocp-console-login.png)\n\n11.Click Display Token link and then copy the log in command:\n\n![](images/ocp-display-token.png)\n\n12.Open a terminal window and Paste the oc command.\n\n![](images/ocp-paste-ocp-terminal.png)\n\n\n## Configuring IBM MQ\n\nIBM Cloud Pak for Integration provides a single solution for all of your enterprise integration needs. The platform provides a comprehensive set of industry-leading capabilities. Combine powerful integration capabilities to create, manage, and monitor all of your integrations across applications, messaging, events, APIs, and more.\n\nIn this task, you create a local queue using MQ Console and check the MQ configuration. You create the queue, which accepts the resulting data from the call to the \"NEWORDER\" API.\n\n1.Open a browser and enter https://github.com/ibm-cloudintegration/dte-labs .You need to configure the MQ security.\n\n![](images/ace-mq-github.png)\n\n2.Select and click **Lab2-AccessBackendSystem** folder.\n\n![](images/ace-mq-download-git.png)\n\n3.Download two zip files (**ace-mq.zip and mqconf.zip**). Click over the **ace-mq.zip** file.\n\n![](images/ace-mq-ace-mqfile.png)\n\n4.Click **Download** and save to your download directory (**/home/student/Downloads** ).\n\n![](images/ace-mq-download-ace-mq.png)\n\n5.Download **mqconf.zip** and save in **/home/student/Downloads**.\n\n6.You need to configure IBM MQ permissions in MQ Runtime, before creating a local queue. Open a terminal window.\n\n![](images/es-command_line.png)\n\n7.In **/home/student** directory, create a work directory **mq-lab**. Use **mkdir -p mq-lab** .\n\n![](images/ace-mq-mkdir.png)\n\n8.Move the two files(**ace-mq.zip** and **mqconf.zip**) from **/home/student/Downloads** to **/home/student/mq-lab**. Use mv **/home/student/Downloads/ace-mq.zip /home/student/mq-lab** and **mv /home/student/Downloads/ace-mqconfig.zip /home/student/mq-lab**.\n\n![](images/ace-mq-move-two-file.png)\n\n9.Go to **/home/student/mq-lab** directory and uncompressing the **mqconfig.zip** . (**Do not uncompress ace-mq.zip**)\n\n10.The uncompressing process creates a directory **mqconf**. This directory contains IBM MQ Queue Manager security configuration. Go to **/home/student/mq-lab/mqconfig** and enter **./loadmq.sh** shell script.\n\n![](images/ace-mq-unzip-mqconfig.png)\n\n11.You have the MQ server configured to be accessed by App Connect Enterprise.\n\n![](images/ace-mq-after-loadmq.png)\n\n12.Open browser and go to **Welcome IBM Cloud Pak for Integration**. Select **Runtimes** and click **mq-demo** to work with IBM MQ.\n\n![](images/ace-mq-start-mq.png)\n\n13.You might see this warning (Potential Security Risk Ahead). Click Advance.  And then click the link, Accept the Risk and Continue). Don’t worry there is no Risk for your workstation.\n\n14.In the **Welcome IBM MQ page** (**QUICKSTART** is the name of queue manager). This page, you can manage queue manager, create queues, learn MQ basics, and get more information about IBM MQ. Click **Create a queue**.\n\n![](images/ace-mq-createaqueue.png)\n\n15.In Create a queue page. You can choose queue type: Local, Alias, Remote, and Model. Click **Local** to create a queue.\n\n![](images/ace-mq-localqueue.png)\n\n16.Enter the queue name: **NEWORDER** and keep the default values and the click **Create**.\n\n![](images/ace-mq-neworder.png)\n\n17.In the **Manage** page, locate the queues and click **NEWORDER** queue link.\n\n![](images/ace-mq-check-neworder.png)\n\n18.You see that the **NEWORDER** queue is empty. Click **QUICKSTART** link (the queue manager).\n\n![](images/ace-mq-neworder-empty.png)\n\n19.Verify MQ Server hostname. Open a terminal window and enter **oc get svc** . Locate the **mq-demo-ibm-mq**  **ClusterIP address**. In this case is: 172.21.26.194.\n\n![](images/ace-mq-get-mq-address.png)\n\n## Working with App Connect Enterprisa Toolkit (integration)\n\nIn this task, take an existing integration flow in ACE and modify it to send only the payload data to the NEWORDER queue.\n\n1.Open a terminal window by right-clicking on the desktop and selecting Open Terminal.\n\n2.Enter **ace toolkit** to open the App Connect Enterprise Toolkit.\n\n![](images/ace-mq-acetoolkit.png)\n\n3.In the Workspace Launcher window, create the workspace **/home/student/IBM/ACET11/workspace/ace-mq**. Click **OK**.\n\n![](images/ace-mq-create-ace-mq-workspace.png)\n\n4.Import App Connect Enterprise project. Click **File -> Import**.\n\n![](images/ace-mq-import-zipfile.png)\n\n5.Select Project Interchange and click **Next** .\n\n![](images/ace-mq-projectinterchange.png)\n\n6.Go to **/home/student/mq-lab** and select **ace-mq.zip**.\n\n![](images/ace-mq-ace-mq-file.png)\n\n7.Check the project name **neworder** and click **Finish**.\n\n![](images/ace-mq-confirm-neworder.png)\n\n8.Click **neworder > Resources > Subflows > getId.subflow** on the left pane.\n\n![](images/ace-mq-opengetid.png)\n\n9.Click the **MQ Output** tile. In the lower-right of the Properties pane, open the Properties tab and click **Basic**. Enter the queue name: **NEWORDER**.\n\n![](images/ace-mq-basci-neworder.png)\n\n10.\tClick the MQ Connection parameter and enter the following settings:\n\n```\n  1.\tConnection*: Select **MQ client connection properties** from the drop-down.\n  2.\tDestination queue manager name: **QUICKSTART** (case-sensitive).\n  3.\tQueue manager hostname: **172.21.26.194**. (When you entered **oc get svc**)\n  4.\tListener: **1414**.\n  5.\tChannel name: **SYSTEM.DEF.SRVCONN** (Server Connection).\n\n```\n![](images/ace-mq-mqconnection.png)\n\n11.Save your flow. Click the **save button** .\n\n12.Now, you need to generate a bar (broker archive) file. The App Connect Enterprise server uses BAR (Broker Archive) files to save compiled message flows, libraries, etc. We have created a file **neworder.bar** for this lab. In the Application Development window in the upper-left, on **neworder application**, right-click and select New then **BAR** file.\n\n![](images/ace-mq-create-bar-file.png)\n\n13.On the Window New Bar file, type the name of bar file: **neworder**.\n\n![](images/ace-mq-neworder-bar-file.png)\n\n14.\tApp Connect Enterprise opens a window: **Prepare window** .\n\n```\n\n  1.\tCheck REST APIs\n  2.\tCheck Compile and inline resources\n  3.\tClick Build and Save\n  4.\tA popup window displays “Operation completed successfully.”\n  5.\tClick Ok and exit out of the toolkit.\n\nApp Connect Enterprise Toolkit saves and compile message flows, sub flows into a BAR file.\n\n```\n![](images/ace-mq-save-bar-file.png)\n\n## Deploying a BAR file\n\nIn this task, deploy the integration flow as App Connect Enterprise containers running in Kubernetes on the Cloud Pak for Integration. You then test the integration API by calling the API to create a new order and confirm the response payload and data in the queue.\n\n1.In your browser, return to the IBM Cloud Pak for Integration.Under **Capabilities**, select the **App Connect Dashboard** line and click **db-demo** instance.\n\n![](images/ace-mq-open-db-demo.png)\n\n2.When you deploy a BAR file, you create a new instance of App Connect Enterprise. Click **Create Server**.\n\n![](images/ace-mq-create-server.png)\n\n3.Now, in the Create an **App Connect Integration Server** page, define which integration tool generated the **BAR File**. Select **Toolkit Integration** and then click **Next**.\n\n![](images/ace-mq-select-toolkit.png)\n\n4.In this step, drag a BAR file or click to upload\n\n![](images/ace-mq-drag-bar-file.png)\n\n5.In the File Upload window. Open **/home/student/IBM/ACET11/workspace/ace-mq/BARfiles** and select the file new **neworders.bar** and click **Open**. Verify the path routes to the **ace-mq** folder.\n\n![](images/ace-mq-new-file-neworder.png)\n\n6.You see that **neworder.bar** has uploaded to be deployed. Click **Next**.\n\n![](images/ace-mq-confirm-neworder-bar.png)\n\n7.You do not need to use the configuration package (**Configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc**) click **Next**.\n\n![](images/ace-mq-configuration.png)\n\n8.Now you configure App Connect, enter the parameters:\n\n```\n\n  1.\tEnter Integration Server name: **neworder**.\n  2.\tChange the replicas to: **1** . (This is a lab and do not need more replicas)\n  3.\tSwitch to **ON** to use **Operational Dashboard (tracing)**.\n  4.\tEnter Operational Dashboard instance namespace: **cp4i**.\n  5.\tUpdate the App Connect Enterprise version to the latest: **11.0.0.9 r3** .\n  6.\tClick **Create** .\n\n```\n![](images/ace-mq-configure-integration-server.png)\n\n9.You see the **App Connect Enterprise Dashboard** with the Integration Server **neworder** deployed and started. Click the **neworder** server icon.\n\n**Note:** The deployment process takes up to 5 minutes, refresh the browser to see the BAR file deployed and started.\n\n![](images/ace-mq-neworder-server.png)\n\n10.Click the **neworder API** icon.\n\n![](images/ace-mq-neworder-api.png)\n\n11.This page displays and copy the REST API Base URL (**Endpoint**), use the base URL (in the example :  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/). It might be different.\nIn this page, you can download a swagger file (you can import this file in API Connect and access by way of API Connect).\n\n![](images/ace-mq-neworder-endpoint.png)\n\n12.Open a terminal window and enter the curl command: curl -k  --request GET http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/00000. And see the results\n\n![](images/ace-mq-curl-result.png)\n\n13.You check the message arrived in queue **NEWORDER** in IBM MQ (**QUICKSTART**). You can check using IBM MQ Console. Open a browser and click **Cloud Pak Platform Navigator** and go to **Runtimes** and click **mq-demo** in the instance **Queue Manager**.\n\n![](images/ace-mq-ckeck-message-neworder.png)\n\n14.You see a new message has arrived in **NEWORDER** queue.\n\n![](images/ace-mq-message-arrived.png)\n\n## Using Operations Dashboard (tracing)\n\n\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance specialists now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n1.Back to the browser with Operations Dashboard opened. Click the Overview option and you see all the tracing of **MQ, App Connect and APIC** (You see how to configure tracing in APIC lab). Operations Dashboard Add-on is based on Jaeger open source project and the **OpenTracing** standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n![](images/ace-mq-tracing-overview.png)\n\n2.You can see also MQ tracing, click **MQ Overview** in Dashboard.\n\n![](images/ace-mq-tracing-mq-overview.png)\n\n3.You can see **App C tracing**, click **App C Overview** in Dashboard.\n\n![](images/ace-mq-tracing-appc-overview.png)\n\n4.In the tracing page in **Dashboards**, select **Traces** the menu on the left.\n\n![](images/ace-mq-tracing-traces.png)\n\n5.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ and App Connect Enterprise.\n\n![](images/ace-mq-tracing-trace-chart.png)\n\n## Summary\n\n\nYou've completed this tutorial. In this lab you learned how to:\n1.\tIncrease efficiency by creating, testing, and debugging an integration flow with a message queue within a single, unified experience\n2.\tIncrease scale by deploying integration flows and message queues as containers on Kubernetes.\n","fileAbsolutePath":"/Users/ravi/Documents/GitHub/cp4i-demohub/src/pages/tutorials/AccessBackendSystems/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}